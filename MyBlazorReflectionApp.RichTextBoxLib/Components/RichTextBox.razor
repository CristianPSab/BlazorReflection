@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using Microsoft.JSInterop

@inject IJSRuntime JS

@namespace MyBlazorReflectionApp.RichTextBoxLib.Components

@if (!string.IsNullOrWhiteSpace(cssContent))
{
    <style>
        @((MarkupString)cssContent)
    </style>
}

<div class="area">
    <p>Este es tu RichTextBox personalizado.</p>
    <textarea id="richTextBoxId" @bind="TextContent"></textarea>
</div>


@code {
    private static readonly log4net.ILog log = log4net.LogManager.GetLogger(typeof(RichTextBox));

    public string TextContent { get; set; } = "Contenido inicial.";
    private IJSObjectReference ? _module;
    private string ?cssContent;
    private bool _jsdLoaded = false;
    private bool _cssLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

     if (firstRender)
        {
            try
            {
                // ✅ Importa el módulo JS una sola vez
                if (_module == null)
                {
                    var jsPath = $"./_content/{typeof(RichTextBox).Assembly.GetName().Name}/js/RichTextBoxInterop.js";
                    _module = await JS.InvokeAsync<IJSObjectReference>("import", jsPath);
                }


              if (componentType != null)
             {
                parameters = new Dictionary<string, object>();

                await LoadJsForComponent();
                await LoadCssForComponent();
                
            }
            else
            {
                Console.WriteLine("❌ Tipo de componente no encontrado en la DLL.");
            }


                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ Error al cargar JS o CSS: {ex}");
            }
        }
    }


    private async Task LoadJsForComponent(Type type)
    {
         if (jsLoaded)
        {
            Console.WriteLine("ℹ️ JS ya cargado, se omite nueva importación.");
            return;
        }


        try
        {
            Console.WriteLine($"🔄 Importando JS desde: {jsPath}");

            if (_module != null)
            {
                await _module.InvokeVoidAsync("initializeRichTextBox", "richTextBoxId");
                _jsLoaded = true;
            }
         }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Failed to load JS: {ex.Message}");
        }
    }


      private async Task LoadCssForComponent()
      {
        if (_cssLoaded)
       {
             log.Info("ℹ️ CSS ya cargado, se omite nueva carga.");
            return;
        }
   
         try
        {
            var cssFileName = typeof(RichTextBox).Name + ".css";
            var cssPath = $"./_content/{typeof(RichTextBox).Assembly.GetName().Name}/css/{cssFileName}";

            log.Info($"🔄 Importando CSS desde: {cssPath}");

            cssContent = await File.ReadAllTextAsync(@"E:\Prueba Blazor Server\Blazor amb Reflection (control compilat)\Controls\RichTextBox\wwwroot\css\RichTextBox.css");
    
           // ✅ Loguea el contenido CSS de forma segura (resumen o completo según necesidad)
        if (!string.IsNullOrWhiteSpace(cssContent))
        {
            log.Info($"✅ CSS Content cargado. Length: {cssContent.Length}");
            // Si quieres ver el contenido completo (no recomendado en producción):
            log.Debug($"Contenido CSS:\n{cssContent}");
        }
        else
        {
            log.Warn("⚠️ CSS Content está vacío.");
    }

        if (_module == null)
        {
            var jsPath = $"./_content/{typeof(RichTextBox).Assembly.GetName().Name}/js/RichTextBoxInterop.js";
            _module = await JS.InvokeAsync<IJSObjectReference>("import", jsPath);
        }

        if (_module != null)
        {
            await _module.InvokeVoidAsync("loadCssDynamically", cssContent);
            _cssLoaded = true;
        }
    }
    catch (Exception ex)
    {
        log.Error("❌ Failed to load CSS", ex);
    }
}

}


